Problem 1b

public class PriorityQueueUsingHeap<T extends Comparable<T>> {
    T[] arr;
    int N;

    public static void main(String[] args) {
        PriorityQueueUsingHeap<Integer> pq = new PriorityQueueUsingHeap<Integer>();
        pq.insert(7);
        pq.insert(2);
        pq.insert(8);
        pq.insert(5);
        pq.insert(4);
        pq.insert(6);
        pq.insert(3);
        pq.insert(1);
        System.out.println("Queue inserted " + pq.toString());

        pq.delMin();
        System.out.println("After first removal " + pq.toString());
        pq.delMin();
        System.out.println("After second removal " + pq.toString());
        pq.delMin();
        System.out.println("After third removal " + pq.toString());
        pq.decreaseKey(2,9);
        System.out.println("After decreasing key " +pq.toString());
    }

    public PriorityQueueUsingHeap(){
        arr = (T[]) new Comparable[2];
        N = 0;
    }

    public void insert(T t){
        if (N == arr.length - 1) resize(2*N + 1);
        arr[++N] = t;
        swim(N);
    }
    
        private void resize(int capacity){
        T[] copy = (T[]) new Comparable[capacity];
        for(int i = 1; i <= N; i ++ )
            copy[i] = arr[i];
        arr = copy;
    }
    
    
    private void swim(int k){
        while(k > 1 && less(k/2, k)){
            exch(k/2,k);
            k = k/2;
        }
    }

    public T delMin(){
        if (isEmpty()) return null;
        T t= arr[1];
        exch(1,N--);
        arr[N+1] = null;
        sink(1);

        if (N == (arr.length -1)/4) resize((arr.length-1) / 2 + 1);
        return t;
    }
    
        private boolean less(int i, int j){
        if (arr[i].compareTo(arr[j]) > 0)
            return true;
        return false;
    }
    
    private boolean isEmpty(){
        return N == 0;
    }

    public String toString(){
        StringBuffer sb = new StringBuffer();
        for(int i = 1; i <= N; i ++)
            sb.append(arr[i].toString()+" ");
        return sb.toString();
    }

    private void sink(int k){
        while (2*k < N){
            int j = 2 * k;
            if(j < N && less(j, j +1)) j = j + 1;
            if(less(j, k)) break;
            exch(k,j);
            k = j;
        }
    }
    
    public void decreaseKey(int i, T newValue){
        arr[i] = newValue;
        sink(i);
    }

    private void exch(int i, int j){
        T temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}

Problem 2b

public class BinarySearchTree 
{ 
	class Node 
	{ 
		int key; 
		Node left, right; 

		public Node(int item) 
		{ 
			key = item; 
			left = right = null; 
		} 
	} 

	Node root; 

	BinarySearchTree() 
	{ 
		root = null; 
	} 

	void deleteKey(int key) 
	{ 
		root = deleteRec(root, key); 
	} 


	Node deleteRec(Node root, int key) 
	{ 
		if (root == null) return root;
		
		if (key < root.key) 
			root.left = deleteRec(root.left, key); 
		else if (key > root.key) 
			root.right = deleteRec(root.right, key); 
			
		else
		{ 
			if (root.left == null) 
				return root.right; 
			else if (root.right == null) 
				return root.left; 
			root.key = minValue(root.right); 
			root.right = deleteRec(root.right, root.key); 
		} 

		return root; 
	} 

	int minValue(Node root) 
	{ 
		int minv = root.key; 
		while (root.left != null) 
		{ 
			minv = root.left.key; 
			root = root.left; 
		} 
		return minv; 
	} 

	void insert(int key) 
	{ 
		root = insertRec(root, key); 
	} 

	Node insertRec(Node root, int key) 
	{ 

		if (root == null) 
		{ 
			root = new Node(key); 
			return root; 
		} 

		if (key < root.key) 
			root.left = insertRec(root.left, key); 
		else if (key > root.key) 
			root.right = insertRec(root.right, key); 
		return root; 
	} 

	void inorder() 
	{ 
		inorderRec(root); 
	} 
	void inorderRec(Node root) 
	{ 
		if (root != null) 
		{ 
			inorderRec(root.left); 
			System.out.print(root.key + " "); 
			inorderRec(root.right); 
		} 
	} 

	public static void main(String[] args) 
	{ 
		BinarySearchTree tree = new BinarySearchTree(); 

		tree.insert(7); 
		tree.insert(2); 
		tree.insert(8); 
		tree.insert(5); 
		tree.insert(4); 
		tree.insert(6); 
		tree.insert(3); 
		tree.insert(1); 

		System.out.println("Inorder traversal of the given tree"); 
		tree.inorder(); 

		System.out.println("\nDelete 7"); 
		tree.deleteKey(7); 
		System.out.println("Inorder traversal of the modified tree"); 
		tree.inorder(); 

		System.out.println("\nDelete 4"); 
		tree.deleteKey(4); 
		System.out.println("Inorder traversal of the modified tree"); 
		tree.inorder(); 

		System.out.println("\nDelete 2"); 
		tree.deleteKey(2); 
		System.out.println("Inorder traversal of the modified tree"); 
		tree.inorder(); 
	} 
} 


References:
I use the source below for the first question. Originally it was a Max Heap so I changed it and added the decreaseKey function.
https://gist.github.com/wihoho/5651772 
https://www.geeksforgeeks.org/binary-search-tree-set-2-delete/

